apiVersion: v1
kind: Template
metadata:
  name: wso2-apim
parameters:
- name: APP_NAME
  required: true
- name: WSO2_HOME
  required: true
  value: /opt/wso2
- name: APP_HOSTNAME
  value: ''
- name: S2I_SOURCE_REPO
  value: https://github.com/andreessen/wso2apim-openshift-example
- name: S2I_SOURCE_REF
  value: master 
- name: S2I_SOURCE_CONTEXT_DIR
  value: .
- name: BUILD_STRATEGY
  description: 'It could be two strategies: source or docker'
  from: '[sourcedk]'
  value: docker
- name: WSO2_MEMORY_LIMIT
  value: 1536Mi
- name: WSO2_CPU_LIMIT
  value: '2'
- name: WSO2_APIM_VERSION
  value: wso2am-2.6.0
- name: WSO2_APIM_DISTRIB_HOST
  value: sb57.emdev.ru
- name: DB_MEMORY_LIMIT
  value: 512Mi
- name: DB_CPU_LIMIT
  value: 300m
- name: DB_NAME
  required: true
  value: apimgtdb
- name: DB_USER
  required: true
  from: '[a-zA-Z0-9]{16}'
  generate: expression
- name: DB_PASSWORD
  required: true
  from: '[a-zA-Z0-9]{16}'
  generate: expression  
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: ${APP_NAME}:latest
      name: latest
      referencePolicy:
        type: ""           
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 200m
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    source:
      contextDir: ${S2I_SOURCE_CONTEXT_DIR}
      git:
        ref: ${S2I_SOURCE_REF}
        uri: ${S2I_SOURCE_REPO}
      type: Git
    strategy:
      ${BUILD_STRATEGY}Strategy:
        env:
        - name: WSO2_HOME
          value: ${WSO2_HOME}
        - name: WSO2_APIM_VERSION
          value: ${WSO2_APIM_VERSION}
        - name: WSO2_APIM_DISTRIB_HOST
          value: ${WSO2_APIM_DISTRIB_HOST}
        - name: WSO2_APIM_URL
          value: ${APP_NAME}-wso2apim.apps.devops.su
      type: ${BUILD_STRATEGY}
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  spec:
    replicas: 1
    selector:
      name: ${APP_NAME}-mysql
    strategy:
      type: Rolling
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - hostname && echo '====' && printenv && echo '====' && echo $MYSQL_SERVICE_HOST && echo '====' && MYSQL_PWD="$MYSQL_ROOT_PASSWORD" 
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e 'create database userdb;' 
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e 'create database regdb;' 
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e 'create database statdb;' 
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e 'create database mbstoredb;'
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e "GRANT ALL PRIVILEGES ON apimgtdb.* TO '$MYSQL_USER'@'%';" 
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e "GRANT ALL PRIVILEGES ON userdb.* TO '$MYSQL_USER'@'%';" 
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e "GRANT ALL PRIVILEGES ON regdb.* TO '$MYSQL_USER'@'%';"
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e "GRANT ALL PRIVILEGES ON statdb.* TO '$MYSQL_USER'@'%';"
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u root -p$MYSQL_ROOT_PASSWORD -P 3306 -e "GRANT ALL PRIVILEGES ON mbstoredb.* TO '$MYSQL_USER'@'%';"
              &&  echo $MYSQL_USER && curl http://${WSO2_APIM_DISTRIB_HOST}/${WSO2_APIM_VERSION}.zip -Lo /tmp/wso2_apim.zip && mkdir /tmp/wso2-apim 
              && unzip -d /tmp/wso2-apim /tmp/wso2_apim.zip
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -P 3306 -D apimgtdb < /tmp/wso2-apim/${WSO2_APIM_VERSION}/dbscripts/apimgt/mysql5.7.sql
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -P 3306 -D userdb < /tmp/wso2-apim/${WSO2_APIM_VERSION}/dbscripts/mysql5.7.sql
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -P 3306 -D regdb < /tmp/wso2-apim/${WSO2_APIM_VERSION}/dbscripts/mysql5.7.sql
              && /opt/rh/rh-mysql57/root/usr/bin/mysql -h $MYSQL_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -P 3306 -D mbstoredb < /tmp/wso2-apim/${WSO2_APIM_VERSION}/dbscripts/mb-store/mysql-mb.sql
              && sleep 10
            containerName: mysql
          failurePolicy: ignore
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: ${APP_NAME}-mysql
          name: ${APP_NAME}-mysql
      spec:
        containers:
        - env:
          - name: WSO2_APIM_DISTRIB_HOST
            value: ${WSO2_APIM_DISTRIB_HOST}
          - name: WSO2_APIM_VERSION
            value: ${WSO2_APIM_VERSION}  
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-mysql
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APP_NAME}-mysql
          - name: MYSQL_SERVICE_HOST
            value: ${APP_NAME}-mysql      
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 200
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - '-i'
                - '-c'
                - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER
                  -D $MYSQL_DATABASE -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${DB_MEMORY_LIMIT}
              cpu: ${DB_CPU_LIMIT}
            requests:
              memory: ${DB_MEMORY_LIMIT}
              cpu: ${DB_CPU_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${APP_NAME}-mysql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${APP_NAME}-mysql-data
          emptyDir: {}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.7
          namespace: openshift
      type: ImageChange
    - type: ConfigChange      
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      liferay: ""
    strategy:
      activeDeadlineSeconds: 21600
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        pre:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - hostname 
              && echo '====' && printenv && echo '====' && echo $MYSQL_SERVICE_HOST && echo '====' && MYSQL_PWD="$MYSQL_ROOT_PASSWORD"
              && for i in {1..5} ; do \
                  echo '>>>' $i \
                  RESULT=$(mysql --batch --skip-column-names -h $MYSQL_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SHOW DATABASES LIKE 'mbstoredb';" | grep mbstoredb > /dev/null; echo "$?") \
                  echo '>>>' $RESULT \
                  if [ $RESULT -eq 0 ];then \
                      echo "A database with the name mbstoredb already exists. exiting" \
                      exit; \
                  fi \
                  if [ "$i" -lt 5 ] ; then \
                      sleep 20 \
                  fi \
                  if [ "$i" == 5 ] ; then \
                    echo "Failed to check mbstoredb. Sending error." \
                      error 20 \
                  fi \
              done \
              && sleep 10
            containerName: mysql
          failurePolicy: ignore
        timeoutSeconds: 600
        updatePeriodSeconds: 1
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
          liferay: ""
      spec:
        containers:
        - env: 
          - name: WSO2_APIM_VERSION
            value: ${WSO2_APIM_VERSION}
          - name: WSO2_APIM_DISTRIB_HOST
            value: ${WSO2_APIM_DISTRIB_HOST}
          - name: WSO2_APIM_URL
            value: ${APP_NAME}-wso2apim.apps.devops.su
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-mysql
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APP_NAME}-mysql
          - name: MYSQL_SERVICE_HOST
            value: ${APP_NAME}-mysql    
          image: ' '
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 9443
            protocol: TCP
          resources:
            limits:
              cpu: ${WSO2_CPU_LIMIT}
              memory: ${WSO2_MEMORY_LIMIT}
          volumeMounts: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes: {}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange     
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 9443-tcp
      port: 8080
      protocol: TCP
      targetPort: 9443
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      liferay: ""
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-sandbox
  spec:
    ports:
    - name: 8280-tcp
      port: 8080
      protocol: TCP
      targetPort: 8280
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      liferay: ""
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-prod
  spec:
    ports:
    - name: 8243-tcp
      port: 8080
      protocol: TCP
      targetPort: 8243
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      liferay: ""
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  spec:
    ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: ${APP_NAME}-mysql
    sessionAffinity: None
    type: ClusterIP                  
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    host: ${APP_HOSTNAME}
    port:
      targetPort: 9443-tcp
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-sandbox
  spec:
    host: ${APP_HOSTNAME}
    port:
      targetPort: 8280-tcp
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${APP_NAME}-sandbox
      weight: 100
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-prod
  spec:
    host: ${APP_HOSTNAME}
    port:
      targetPort: 8243-tcp
    tls:
      termination: passthrough
    to:
      kind: Service
      name: ${APP_NAME}-prod
      weight: 100
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  stringData:
    database-name: ${DB_NAME}
    database-password: ${DB_PASSWORD}
    database-root-password: ${DB_PASSWORD}
    database-user: ${DB_USER}
  type: Opaque              
